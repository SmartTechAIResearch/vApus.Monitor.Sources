Generate dlls used for ESXi monitoring from the wsdls.

Following from the vSphere 5 documentaion is mostly correct, except that you can use tools like wsdl from the Visual Studio Command Prompt.

The SDK folder already contains the generated dlls using the vs 2012 tools (use the Windows Explorer search functionality)

Building the C# Samples
In the vSphere Web Services SDK, VMware supplies sample clients for Visual Studio 2005, 2008, and 2010. The SDK includes a solution (.sln) file for each version of Visual Studio, such as Samples2008.sln. Each solution file refers to DLLs whose filenames also include the version of Visual Studio. For example, Samples2008.sln refers to VimService2008.dll and VimService2008.XmlSerializers.dll.
Building for a Chosen Version of Visual Studio
This procedure shows how to build the DLLs for your choice of Visual Studio version. The filenames you build will contain the actual version, whereas the procedure shows filenames that contain the place-holder string 20xx. Substitute your Visual Studio version wherever you see 20xx in a filename.
For example, if you plan to run the DLLs in the Visual Studio 2010 environment, use the switch /out:VimService2010.dll in step 4 and /p VimService2010.dll in step 5. These filenames are referenced in the Samples2010.sln solution file.
Iterating the Build for Both Vim and Vim25 Namespaces
In addition, you must do the sequence of step 3 through step 8 twice, substituting the actual values Vim and Vim25 on successive passes wherever you see the place-holder string Vimyy in a filename. This is needed because the solution files reference both the old and the new API namespaces.
For example, if you plan to run the DLLs in the Visual Studio 2010 environment, use the switch /n:VimApi in step 3 and /out:VimService2010.dll in step 4 the first time through. Continue to step 8, making the same substitutions in the other steps. Return to step 3 and repeat until step 8, using the switch /n:Vim25Api in step 3, /out:Vim25Service2010.dll in step 4, and so on.
To build the C# samples
1
Open the Microsoft .NET Framework SDK command prompt (from the Windows Start menu, select Programs > Microsoft .NET Framework SDK > SDK Command Prompt. The command prompt launches.
2
Navigate to the DotNet samples subdirectory.
cd %SDKHOME%\samples\DotNet
3
Generate the VimService.cs file from the WSDL, using wsdl.exe:
wsdl.exe /n:VimyyApi vim.wsdl vimService.wsdl
This command generates VimService.cs (the default output file) in the current directory, using the Vim or the Vim25 namespace.
4
Compile VimService.cs into a library.
csc /t:library /out:VimyyService20xx.dll VimService.cs
This command generates a serializer assembly (a DLL).
5
Use the sgen tool to pre-generate and compile the XML serializers.
sgen /p VimyyService20xx.dll
This command outputs the VimyyService20xx.XmlSerializers.dll file in the current directory. This DLL file contains pre-generated XML serializer code.
The behavior of the sgen tool varies depending on what you have in your Machine.config file. For example, by default sgen is supposed to output optimized non-debug code, but that is not always the case. To get some visibility into the tool, use the /k flag, which causes sgen to keep all its temporary generated files, including the source files and command-line option files.
6
Using the "find and replace" capability in Visual Studio or your favorite editor, find the following string in the VimService.cs file that you generated in step 3.
[System.Xml.Serialization.XmlIncludeAttribute
Replace it with:
// [System.Xml.Serialization.XmlIncludeAttribute
This will prevent .NET from processing the Xml.Serialization.XmlIncludeAttribute attributes that are the main cause of the slow instantiation of the VimService class. Refer to the MSDN documentation page for more details on this attribute:
http://msdn2.microsoft.com/en-us/library/system.xml.serialization.xmlincludeattribute.aspx
If you are using some other .NET language, modify the replaced string to comment it out according to the syntax of that language.
7
Annotate the VimService class in the VimService.cs file that you generated in step 3, adding the XmlSerializerAssemblyAttribute to point to the location of the XML serializer assembly. Add this annotation:
[System.Xml.Serialization.XmlSerializerAssemblyAttribute(AssemblyName = "VimyyService20xx.XmlSerializers")]
You should end up with something like this:
// ... Some code here ...
[System.Xml.Serialization.XmlSerializerAssemblyAttribute(AssemblyName = "VimyyService20xx.XmlSerializers")]
public partial class VimService : System.Web.Services.Protocols.SoapHttpClientProtocol {
// ... More code here.
The Assembly name should be the name of the Serializer DLL generated by the sgen tool in step 5.
8
Regenerate the VimyyService20xx.dll library with the following command:
csc /t:library /out:VimyyService20xx.dll VimService.cs
9
Ensure your application references the new VimyyService20xx.dll library. 